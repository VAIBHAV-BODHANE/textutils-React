{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","TextForm","useState","text","setText","textCount","split","index","indexOf","splice","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","match","toString","length","Alert","alert","role","word","lower","charAt","slice","capitalize","message","defaultProps","aboutText","App","setMode","setAlert","setTimeout","modeColor","console","log","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2bd9c910.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const darkMode = () => {\r\n        props.toggleMode('dark')\r\n    }\r\n    const lightMode = () => {\r\n        props.toggleMode('light')\r\n    }\r\n    const successMode = () => {\r\n        props.toggleMode('success')\r\n    }\r\n    const dangerMode = () => {\r\n        props.toggleMode('danger')\r\n    }\r\n    const warningMode = () => {\r\n        props.toggleMode('warning')\r\n    }\r\n    const infoMode = () => {\r\n        props.toggleMode('info')\r\n    }\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${(props.mode === 'dark'?'dark':(props.mode ==='light'?'light':'dark'))} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    {/* <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}> */}\r\n                        {/* <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label> */}\r\n                        \r\n                        <button className={`btn btn-dark p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={darkMode} type=\"button\"></button>\r\n                        <button className={`btn btn-light p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={lightMode} type=\"button\"></button>\r\n                        <button className={`btn btn-success p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={successMode} type=\"button\"></button>\r\n                        <button className={`btn btn-danger p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={dangerMode} type=\"button\"></button>\r\n                        <button className={`btn btn-warning p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={warningMode} type=\"button\"></button>\r\n                        <button className={`btn btn-info p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={infoMode} type=\"button\"></button>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About text here\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text converted to UPPERCASE!\", \"info\")\r\n    }\r\n    \r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text converted to lowercase!\", \"info\")\r\n    }\r\n\r\n    const handleEmailExtractor = () => {\r\n        let patt = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi;\r\n        let newText = text.match(patt)\r\n        if (newText !== null) {\r\n            setText(newText.toString())\r\n        } else {\r\n            setText(\"No email ids found\")\r\n        }\r\n        if (newText === null) {\r\n            props.showAlert(\"Emails Not found!\", \"info\")\r\n        } else {\r\n            props.showAlert(\"Emails found!\", \"info\")\r\n        }\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        setText(\"\")\r\n        props.showAlert(\"Text Cleard!\", \"info\")\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n\r\n    const textCount = text.split(\" \")\r\n    let index = textCount.indexOf(\"\")\r\n    if (index >= 0) {\r\n        textCount.splice(index)\r\n    }\r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className={`form-control bg-${props.mode} text-${props.mode === 'light'?'dark':'light'}`} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleEmailExtractor}>Email Extractor</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h2>Your text summary</h2>\r\n            <p>{textCount.length} words, {text.length} characters.</p>\r\n            <p>{0.008 * textCount.length} minutes to read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter some text in above textbox to preview it here!'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)}: {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n  \n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const toggleMode = (modeColor) => {\n    console.log(modeColor);\n    if (modeColor === 'dark'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#121212'\n      document.body.style.color = 'white'\n      showAlert(\"Dark Mode Enable\", \"success\")\n    } else if (modeColor === 'success') {\n        setMode('success')\n        document.body.style.backgroundColor = '#12633e'\n        document.body.style.color = 'white'\n        showAlert(\"Success Mode Enable\", \"primary\")\n    } else if (modeColor === 'danger') {\n        setMode('danger')\n        document.body.style.backgroundColor = '#9c2834'\n        document.body.style.color = 'white'\n        showAlert(\"Danger Mode Enable\", \"primary\")\n    } else if (modeColor === 'warning') {\n        setMode('warning')\n        document.body.style.backgroundColor = '#d19e06'\n        document.body.style.color = 'white'\n        showAlert(\"Warning Mode Enable\", \"primary\")\n    } else if (modeColor === 'info') {\n        setMode('info')\n        document.body.style.backgroundColor = '#0b99b5'\n        document.body.style.color = 'white'\n        showAlert(\"Info Mode Enable\", \"primary\")\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = '#f0f0f0'\n      document.body.style.color = 'black'\n      showAlert(\"Light Mode Enable\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About Textutils\"/>\n        <Alert alert={alert} />\n        {/* <Switch> */}\n          {/* <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/\"> */}\n            <div className=\"container my-3\">\n              <TextForm showAlert={showAlert} mode={mode} heading=\"Enter the text to analyze below\"/>\n            </div>\n          {/* </Route>\n        </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}