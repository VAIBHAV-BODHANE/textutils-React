{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","TextForm","text","setText","textCount","split","index","indexOf","splice","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","match","toString","length","Alert","alert","role","word","lower","charAt","slice","capitalize","message","defaultProps","App","setMode","setAlert","setTimeout","modeColor","console","log","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.df5517fc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setBtnText(\"Enable Ligth Mode\")\r\n    } else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark Mode\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-3\">\r\n        <button onClick={toggleStyle} className=\"btn btn-primary\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const darkMode = () => {\r\n        props.toggleMode('dark')\r\n    }\r\n    const lightMode = () => {\r\n        props.toggleMode('light')\r\n    }\r\n    const successMode = () => {\r\n        props.toggleMode('success')\r\n    }\r\n    const dangerMode = () => {\r\n        props.toggleMode('danger')\r\n    }\r\n    const warningMode = () => {\r\n        props.toggleMode('warning')\r\n    }\r\n    const infoMode = () => {\r\n        props.toggleMode('info')\r\n    }\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${(props.mode === 'dark'?'dark':(props.mode ==='light'?'light':'dark'))} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}> */}\r\n                        {/* <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label> */}\r\n                        \r\n                        <button className={`btn btn-dark p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={darkMode} type=\"button\"></button>\r\n                        <button className={`btn btn-light p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={lightMode} type=\"button\"></button>\r\n                        <button className={`btn btn-success p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={successMode} type=\"button\"></button>\r\n                        <button className={`btn btn-danger p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={dangerMode} type=\"button\"></button>\r\n                        <button className={`btn btn-warning p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={warningMode} type=\"button\"></button>\r\n                        <button className={`btn btn-info p-2 mx-1 border border-${props.mode==='light'?'dark':'light'}`} onClick={infoMode} type=\"button\"></button>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About text here\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text converted to UPPERCASE!\", \"info\")\r\n    }\r\n    \r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text converted to lowercase!\", \"info\")\r\n    }\r\n\r\n    const handleEmailExtractor = () => {\r\n        let patt = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi;\r\n        let newText = text.match(patt)\r\n        if (newText !== null) {\r\n            setText(newText.toString())\r\n        } else {\r\n            setText(\"No email ids found\")\r\n        }\r\n        if (newText === null) {\r\n            props.showAlert(\"Emails Not found!\", \"info\")\r\n        } else {\r\n            props.showAlert(\"Emails found!\", \"info\")\r\n        }\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        setText(\"\")\r\n        props.showAlert(\"Text Cleard!\", \"info\")\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n\r\n    const textCount = text.split(\" \")\r\n    let index = textCount.indexOf(\"\")\r\n    if (index >= 0) {\r\n        textCount.splice(index)\r\n    }\r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className={`form-control bg-${props.mode} text-${props.mode === 'light'?'dark':'light'}`} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleEmailExtractor}>Email Extractor</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h2>Your text summary</h2>\r\n            <p>{textCount.length} words, {text.length} characters.</p>\r\n            <p>{0.008 * textCount.length} minutes to read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter some text in above textbox to preview it here!'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)}: {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n  \n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const toggleMode = (modeColor) => {\n    console.log(modeColor);\n    if (modeColor === 'dark'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#121212'\n      document.body.style.color = 'white'\n      showAlert(\"Dark Mode Enable\", \"success\")\n    } else if (modeColor === 'success') {\n        setMode('success')\n        document.body.style.backgroundColor = '#12633e'\n        document.body.style.color = 'white'\n        showAlert(\"Success Mode Enable\", \"primary\")\n    } else if (modeColor === 'danger') {\n        setMode('danger')\n        document.body.style.backgroundColor = '#9c2834'\n        document.body.style.color = 'white'\n        showAlert(\"Danger Mode Enable\", \"primary\")\n    } else if (modeColor === 'warning') {\n        setMode('warning')\n        document.body.style.backgroundColor = '#d19e06'\n        document.body.style.color = 'white'\n        showAlert(\"Warning Mode Enable\", \"primary\")\n    } else if (modeColor === 'info') {\n        setMode('info')\n        document.body.style.backgroundColor = '#0b99b5'\n        document.body.style.color = 'white'\n        showAlert(\"Info Mode Enable\", \"primary\")\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = '#f0f0f0'\n      document.body.style.color = 'black'\n      showAlert(\"Light Mode Enable\", \"success\")\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About Textutils\"/>\n        <Alert alert={alert} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"container my-3\">\n              <TextForm showAlert={showAlert} mode={mode} heading=\"Enter the text to analyze below\"/>\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}